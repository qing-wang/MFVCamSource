#include "pch.h"
#include "Tools.h"
#include "EnumNames.h"

struct DWORDAndNameW
{
	DWORD dw;
	const WCHAR* name;
};

struct DWORDAndNameA
{
	DWORD dw;
	const CHAR* name;
};

#define ID_AND_NAME_W(x) { (DWORD)x, L#x }
#define ID_AND_NAME_A(x) { (DWORD)x, #x }

static DWORDAndNameA __WM[] =
{
	ID_AND_NAME_A(WM_CREATE),
	ID_AND_NAME_A(WM_NULL),
	ID_AND_NAME_A(WM_CREATE),
	ID_AND_NAME_A(WM_DELETEITEM),
	ID_AND_NAME_A(WM_DESTROY),
	ID_AND_NAME_A(WM_MOVE),
	ID_AND_NAME_A(WM_SIZE),
	ID_AND_NAME_A(WM_ACTIVATE),
	ID_AND_NAME_A(WM_SETFOCUS),
	ID_AND_NAME_A(WM_KILLFOCUS),
	ID_AND_NAME_A(WM_ENABLE),
	ID_AND_NAME_A(WM_SETREDRAW),
	ID_AND_NAME_A(WM_SETTEXT),
	ID_AND_NAME_A(WM_GETTEXT),
	ID_AND_NAME_A(WM_GETTEXTLENGTH),
	ID_AND_NAME_A(WM_PAINT),
	ID_AND_NAME_A(WM_CLOSE),
	ID_AND_NAME_A(WM_QUERYENDSESSION),
	ID_AND_NAME_A(WM_QUIT),
	ID_AND_NAME_A(WM_QUERYOPEN),
	ID_AND_NAME_A(WM_ERASEBKGND),
	ID_AND_NAME_A(WM_SYSCOLORCHANGE),
	ID_AND_NAME_A(WM_ENDSESSION),
	ID_AND_NAME_A(WM_SHOWWINDOW),
	ID_AND_NAME_A(WM_WININICHANGE),
	ID_AND_NAME_A(WM_DEVMODECHANGE),
	ID_AND_NAME_A(WM_ACTIVATEAPP),
	ID_AND_NAME_A(WM_FONTCHANGE),
	ID_AND_NAME_A(WM_TIMECHANGE),
	ID_AND_NAME_A(WM_CANCELMODE),
	ID_AND_NAME_A(WM_SETCURSOR),
	ID_AND_NAME_A(WM_MOUSEACTIVATE),
	ID_AND_NAME_A(WM_CHILDACTIVATE),
	ID_AND_NAME_A(WM_QUEUESYNC),
	ID_AND_NAME_A(WM_GETMINMAXINFO),
	ID_AND_NAME_A(WM_PAINTICON),
	ID_AND_NAME_A(WM_ICONERASEBKGND),
	ID_AND_NAME_A(WM_NEXTDLGCTL),
	ID_AND_NAME_A(WM_SPOOLERSTATUS),
	ID_AND_NAME_A(WM_DRAWITEM),
	ID_AND_NAME_A(WM_MEASUREITEM),
	ID_AND_NAME_A(WM_VKEYTOITEM),
	ID_AND_NAME_A(WM_CHARTOITEM),
	ID_AND_NAME_A(WM_SETFONT),
	ID_AND_NAME_A(WM_GETFONT),
	ID_AND_NAME_A(WM_SETHOTKEY),
	ID_AND_NAME_A(WM_GETHOTKEY),
	ID_AND_NAME_A(WM_QUERYDRAGICON),
	ID_AND_NAME_A(WM_COMPAREITEM),
	ID_AND_NAME_A(WM_GETOBJECT),
	ID_AND_NAME_A(WM_COMPACTING),
	ID_AND_NAME_A(WM_COMMNOTIFY),
	ID_AND_NAME_A(WM_WINDOWPOSCHANGING),
	ID_AND_NAME_A(WM_WINDOWPOSCHANGED),
	ID_AND_NAME_A(WM_POWER),
	ID_AND_NAME_A(WM_COPYDATA),
	ID_AND_NAME_A(WM_CANCELJOURNAL),
	ID_AND_NAME_A(WM_NOTIFY),
	ID_AND_NAME_A(WM_INPUTLANGCHANGEREQUEST),
	ID_AND_NAME_A(WM_INPUTLANGCHANGE),
	ID_AND_NAME_A(WM_TCARD),
	ID_AND_NAME_A(WM_HELP),
	ID_AND_NAME_A(WM_USERCHANGED),
	ID_AND_NAME_A(WM_NOTIFYFORMAT),
	ID_AND_NAME_A(WM_CONTEXTMENU),
	ID_AND_NAME_A(WM_STYLECHANGING),
	ID_AND_NAME_A(WM_STYLECHANGED),
	ID_AND_NAME_A(WM_DISPLAYCHANGE),
	ID_AND_NAME_A(WM_GETICON),
	ID_AND_NAME_A(WM_SETICON),
	ID_AND_NAME_A(WM_NCCREATE),
	ID_AND_NAME_A(WM_NCDESTROY),
	ID_AND_NAME_A(WM_NCCALCSIZE),
	ID_AND_NAME_A(WM_NCHITTEST),
	ID_AND_NAME_A(WM_NCPAINT),
	ID_AND_NAME_A(WM_NCACTIVATE),
	ID_AND_NAME_A(WM_GETDLGCODE),
	ID_AND_NAME_A(WM_NCMOUSEMOVE),
	ID_AND_NAME_A(WM_NCMOUSELEAVE),
	ID_AND_NAME_A(WM_NCLBUTTONDOWN),
	ID_AND_NAME_A(WM_NCLBUTTONUP),
	ID_AND_NAME_A(WM_NCLBUTTONDBLCLK),
	ID_AND_NAME_A(WM_NCRBUTTONDOWN),
	ID_AND_NAME_A(WM_NCRBUTTONUP),
	ID_AND_NAME_A(WM_NCRBUTTONDBLCLK),
	ID_AND_NAME_A(WM_NCMBUTTONDOWN),
	ID_AND_NAME_A(WM_NCMBUTTONUP),
	ID_AND_NAME_A(WM_NCMBUTTONDBLCLK),
	ID_AND_NAME_A(WM_NCXBUTTONDOWN),
	ID_AND_NAME_A(WM_NCXBUTTONUP),
	ID_AND_NAME_A(WM_NCXBUTTONDBLCLK),
	ID_AND_NAME_A(WM_KEYDOWN),
	ID_AND_NAME_A(WM_KEYUP),
	ID_AND_NAME_A(WM_CHAR),
	ID_AND_NAME_A(WM_DEADCHAR),
	ID_AND_NAME_A(WM_SYSKEYDOWN),
	ID_AND_NAME_A(WM_SYSKEYUP),
	ID_AND_NAME_A(WM_SYSCHAR),
	ID_AND_NAME_A(WM_SYSDEADCHAR),
	ID_AND_NAME_A(WM_IME_STARTCOMPOSITION),
	ID_AND_NAME_A(WM_IME_ENDCOMPOSITION),
	ID_AND_NAME_A(WM_IME_COMPOSITION),
	ID_AND_NAME_A(WM_INITDIALOG),
	ID_AND_NAME_A(WM_COMMAND),
	ID_AND_NAME_A(WM_SYSCOMMAND),
	ID_AND_NAME_A(WM_TIMER),
	ID_AND_NAME_A(WM_HSCROLL),
	ID_AND_NAME_A(WM_VSCROLL),
	ID_AND_NAME_A(WM_INITMENU),
	ID_AND_NAME_A(WM_INITMENUPOPUP),
	ID_AND_NAME_A(WM_MENUSELECT),
	ID_AND_NAME_A(WM_MENUCHAR),
	ID_AND_NAME_A(WM_ENTERIDLE),
	ID_AND_NAME_A(WM_UNINITMENUPOPUP),
	ID_AND_NAME_A(WM_CHANGEUISTATE),
	ID_AND_NAME_A(WM_UPDATEUISTATE),
	ID_AND_NAME_A(WM_QUERYUISTATE),
	ID_AND_NAME_A(WM_CTLCOLORMSGBOX),
	ID_AND_NAME_A(WM_CTLCOLOREDIT),
	ID_AND_NAME_A(WM_CTLCOLORLISTBOX),
	ID_AND_NAME_A(WM_CTLCOLORBTN),
	ID_AND_NAME_A(WM_CTLCOLORDLG),
	ID_AND_NAME_A(WM_CTLCOLORSCROLLBAR),
	ID_AND_NAME_A(WM_CTLCOLORSTATIC),
	ID_AND_NAME_A(WM_MOUSEMOVE),
	ID_AND_NAME_A(WM_LBUTTONDOWN),
	ID_AND_NAME_A(WM_LBUTTONUP),
	ID_AND_NAME_A(WM_LBUTTONDBLCLK),
	ID_AND_NAME_A(WM_RBUTTONDOWN),
	ID_AND_NAME_A(WM_RBUTTONUP),
	ID_AND_NAME_A(WM_RBUTTONDBLCLK),
	ID_AND_NAME_A(WM_MBUTTONDOWN),
	ID_AND_NAME_A(WM_MBUTTONUP),
	ID_AND_NAME_A(WM_MBUTTONDBLCLK),
	ID_AND_NAME_A(WM_XBUTTONDOWN),
	ID_AND_NAME_A(WM_XBUTTONUP),
	ID_AND_NAME_A(WM_XBUTTONDBLCLK),
	ID_AND_NAME_A(WM_MOUSEWHEEL),
	ID_AND_NAME_A(WM_MOUSEHWHEEL),
	ID_AND_NAME_A(WM_PARENTNOTIFY),
	ID_AND_NAME_A(WM_ENTERMENULOOP),
	ID_AND_NAME_A(WM_EXITMENULOOP),
	ID_AND_NAME_A(WM_NEXTMENU),
	ID_AND_NAME_A(WM_SIZING),
	ID_AND_NAME_A(WM_CAPTURECHANGED),
	ID_AND_NAME_A(WM_MOVING),
	ID_AND_NAME_A(WM_POWERBROADCAST),
	ID_AND_NAME_A(WM_DEVICECHANGE),
	ID_AND_NAME_A(WM_IME_SETCONTEXT),
	ID_AND_NAME_A(WM_IME_NOTIFY),
	ID_AND_NAME_A(WM_IME_CONTROL),
	ID_AND_NAME_A(WM_IME_COMPOSITIONFULL),
	ID_AND_NAME_A(WM_IME_SELECT),
	ID_AND_NAME_A(WM_IME_CHAR),
	ID_AND_NAME_A(WM_IME_KEYDOWN),
	ID_AND_NAME_A(WM_IME_KEYUP),
	ID_AND_NAME_A(WM_MDICREATE),
	ID_AND_NAME_A(WM_MDIDESTROY),
	ID_AND_NAME_A(WM_MDIACTIVATE),
	ID_AND_NAME_A(WM_MDIRESTORE),
	ID_AND_NAME_A(WM_MDINEXT),
	ID_AND_NAME_A(WM_MDIMAXIMIZE),
	ID_AND_NAME_A(WM_MDITILE),
	ID_AND_NAME_A(WM_MDICASCADE),
	ID_AND_NAME_A(WM_MDIICONARRANGE),
	ID_AND_NAME_A(WM_MDIGETACTIVE),
	ID_AND_NAME_A(WM_MDISETMENU),
	ID_AND_NAME_A(WM_ENTERSIZEMOVE),
	ID_AND_NAME_A(WM_EXITSIZEMOVE),
	ID_AND_NAME_A(WM_DROPFILES),
	ID_AND_NAME_A(WM_MDIREFRESHMENU),
	ID_AND_NAME_A(WM_POINTERDEVICECHANGE),
	ID_AND_NAME_A(WM_POINTERDEVICEINRANGE),
	ID_AND_NAME_A(WM_POINTERDEVICEOUTOFRANGE),
	ID_AND_NAME_A(WM_NCPOINTERUPDATE),
	ID_AND_NAME_A(WM_NCPOINTERDOWN),
	ID_AND_NAME_A(WM_NCPOINTERUP),
	ID_AND_NAME_A(WM_POINTERUPDATE),
	ID_AND_NAME_A(WM_POINTERDOWN),
	ID_AND_NAME_A(WM_POINTERUP),
	ID_AND_NAME_A(WM_POINTERENTER),
	ID_AND_NAME_A(WM_POINTERLEAVE),
	ID_AND_NAME_A(WM_POINTERACTIVATE),
	ID_AND_NAME_A(WM_POINTERCAPTURECHANGED),
	ID_AND_NAME_A(WM_TOUCHHITTESTING),
	ID_AND_NAME_A(WM_POINTERWHEEL),
	ID_AND_NAME_A(WM_POINTERHWHEEL),
	ID_AND_NAME_A(DM_POINTERHITTEST),
	ID_AND_NAME_A(WM_POINTERROUTEDTO),
	ID_AND_NAME_A(WM_POINTERROUTEDAWAY),
	ID_AND_NAME_A(WM_POINTERROUTEDRELEASED),
	ID_AND_NAME_A(WM_MOUSEHOVER),
	ID_AND_NAME_A(WM_MOUSELEAVE),
	ID_AND_NAME_A(WM_DPICHANGED),
	ID_AND_NAME_A(WM_GETDPISCALEDSIZE),
	ID_AND_NAME_A(WM_DPICHANGED_BEFOREPARENT),
	ID_AND_NAME_A(WM_DPICHANGED_AFTERPARENT),
	ID_AND_NAME_A(WM_CUT),
	ID_AND_NAME_A(WM_COPY),
	ID_AND_NAME_A(WM_PASTE),
	ID_AND_NAME_A(WM_CLEAR),
	ID_AND_NAME_A(WM_UNDO),
	ID_AND_NAME_A(WM_RENDERFORMAT),
	ID_AND_NAME_A(WM_RENDERALLFORMATS),
	ID_AND_NAME_A(WM_DESTROYCLIPBOARD),
	ID_AND_NAME_A(WM_DRAWCLIPBOARD),
	ID_AND_NAME_A(WM_PAINTCLIPBOARD),
	ID_AND_NAME_A(WM_VSCROLLCLIPBOARD),
	ID_AND_NAME_A(WM_SIZECLIPBOARD),
	ID_AND_NAME_A(WM_ASKCBFORMATNAME),
	ID_AND_NAME_A(WM_CHANGECBCHAIN),
	ID_AND_NAME_A(WM_HSCROLLCLIPBOARD),
	ID_AND_NAME_A(WM_QUERYNEWPALETTE),
	ID_AND_NAME_A(WM_PALETTEISCHANGING),
	ID_AND_NAME_A(WM_PALETTECHANGED),
	ID_AND_NAME_A(WM_HOTKEY),
	ID_AND_NAME_A(WM_PRINT),
	ID_AND_NAME_A(WM_PRINTCLIENT),
	ID_AND_NAME_A(WM_THEMECHANGED),
	ID_AND_NAME_A(WM_HANDHELDFIRST),
	ID_AND_NAME_A(WM_GETTITLEBARINFOEX),
	ID_AND_NAME_A(WM_HANDHELDLAST),
	ID_AND_NAME_A(WM_AFXFIRST),
	ID_AND_NAME_A(WM_AFXLAST),
	ID_AND_NAME_A(WM_PENWINFIRST),
	ID_AND_NAME_A(WM_PENWINLAST),
	ID_AND_NAME_A(WM_APP),
	ID_AND_NAME_A(WM_USER),
	ID_AND_NAME_A(WM_DWMCOMPOSITIONCHANGED),
	ID_AND_NAME_A(WM_DWMNCRENDERINGCHANGED),
	ID_AND_NAME_A(WM_DWMCOLORIZATIONCOLORCHANGED),
	ID_AND_NAME_A(WM_DWMWINDOWMAXIMIZEDCHANGE),
	ID_AND_NAME_A(WM_DWMSENDICONICTHUMBNAIL),
	ID_AND_NAME_A(WM_DWMSENDICONICLIVEPREVIEWBITMAP),
};

static DWORDAndNameW __KSPROPERTY_TYPE[]
{
	ID_AND_NAME_W(KSPROPERTY_TYPE_GET),
	ID_AND_NAME_W(KSPROPERTY_TYPE_GETPAYLOADSIZE),
	ID_AND_NAME_W(KSPROPERTY_TYPE_SET),
	ID_AND_NAME_W(KSPROPERTY_TYPE_GETPAYLOADSIZE),
	ID_AND_NAME_W(KSPROPERTY_TYPE_SETSUPPORT),
	ID_AND_NAME_W(KSPROPERTY_TYPE_BASICSUPPORT),
	ID_AND_NAME_W(KSPROPERTY_TYPE_RELATIONS),
	ID_AND_NAME_W(KSPROPERTY_TYPE_SERIALIZESET),
	ID_AND_NAME_W(KSPROPERTY_TYPE_UNSERIALIZESET),
	ID_AND_NAME_W(KSPROPERTY_TYPE_SERIALIZERAW),
	ID_AND_NAME_W(KSPROPERTY_TYPE_UNSERIALIZERAW),
	ID_AND_NAME_W(KSPROPERTY_TYPE_SERIALIZESIZE),
	ID_AND_NAME_W(KSPROPERTY_TYPE_DEFAULTVALUES),
	ID_AND_NAME_W(KSPROPERTY_TYPE_TOPOLOGY),
	ID_AND_NAME_W(KSPROPERTY_TYPE_HIGHPRIORITY),
	ID_AND_NAME_W(KSPROPERTY_TYPE_FSFILTERSCOPE),
	ID_AND_NAME_W(KSPROPERTY_TYPE_COPYPAYLOAD),
};

static DWORDAndNameW __KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY[]
{
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOMODE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOFRAMERATE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOMAXFRAMERATE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOTRIGGERTIME),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_WARMSTART),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_MAXVIDFPS_PHOTORES),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOTHUMBNAIL),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_SCENEMODE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_TORCHMODE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_FLASHMODE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_OPTIMIZATIONHINT),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_WHITEBALANCEMODE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_EXPOSUREMODE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSMODE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_ISO),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_FIELDOFVIEW),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_EVCOMPENSATION),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_CAMERAANGLEOFFSET),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_METADATA),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSPRIORITY),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSSTATE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_ROI_CONFIGCAPS),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_ROI_ISPCONTROL),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOCONFIRMATION),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_ZOOM),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_MCC),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_ISO_ADVANCED),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOSTABILIZATION),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_VFR),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_FACEDETECTION),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOHDR),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_HISTOGRAM),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_OIS),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_ADVANCEDPHOTO),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_PROFILE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_FACEAUTH_MODE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_SECURE_MODE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOTEMPORALDENOISING),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_IRTORCHMODE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_RELATIVEPANELOPTIMIZATION),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_EYEGAZECORRECTION),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_BACKGROUNDSEGMENTATION),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_DIGITALWINDOW_CONFIGCAPS),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXTENDED_DIGITALWINDOW),
};

static DWORDAndNameW __KSPROPERTY_VIDCAP_CAMERACONTROL[]
{
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_PAN),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_TILT),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_ROLL),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_ZOOM),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXPOSURE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_IRIS),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_FOCUS),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_SCANMODE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_PRIVACY),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_PANTILT),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_PAN_RELATIVE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_TILT_RELATIVE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_ROLL_RELATIVE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_ZOOM_RELATIVE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_EXPOSURE_RELATIVE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_IRIS_RELATIVE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_FOCUS_RELATIVE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_PANTILT_RELATIVE),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_AUTO_EXPOSURE_PRIORITY),
};

static DWORDAndNameW __KSPROPERTY_VIDCAP_VIDEOPROCAMP[]
{
	ID_AND_NAME_W(KSPROPERTY_VIDEOPROCAMP_BRIGHTNESS),
	ID_AND_NAME_W(KSPROPERTY_VIDEOPROCAMP_CONTRAST),
	ID_AND_NAME_W(KSPROPERTY_VIDEOPROCAMP_HUE),
	ID_AND_NAME_W(KSPROPERTY_VIDEOPROCAMP_SATURATION),
	ID_AND_NAME_W(KSPROPERTY_VIDEOPROCAMP_SHARPNESS),
	ID_AND_NAME_W(KSPROPERTY_VIDEOPROCAMP_GAMMA),
	ID_AND_NAME_W(KSPROPERTY_VIDEOPROCAMP_COLORENABLE),
	ID_AND_NAME_W(KSPROPERTY_VIDEOPROCAMP_WHITEBALANCE),
	ID_AND_NAME_W(KSPROPERTY_VIDEOPROCAMP_BACKLIGHT_COMPENSATION),
	ID_AND_NAME_W(KSPROPERTY_VIDEOPROCAMP_GAIN),
	ID_AND_NAME_W(KSPROPERTY_VIDEOPROCAMP_DIGITAL_MULTIPLIER),
	ID_AND_NAME_W(KSPROPERTY_VIDEOPROCAMP_DIGITAL_MULTIPLIER_LIMIT),
	ID_AND_NAME_W(KSPROPERTY_VIDEOPROCAMP_WHITEBALANCE_COMPONENT),
	ID_AND_NAME_W(KSPROPERTY_VIDEOPROCAMP_POWERLINE_FREQUENCY),
};

static DWORDAndNameW __KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_PROPERTY[]
{
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_CAPABILITY),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_SET),
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_CLEAR),
};

static DWORDAndNameW __KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST[]
{
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_PROPERTY_ID),
};

static DWORDAndNameW __KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY[]
{
	ID_AND_NAME_W(KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_PROPERTY_ID),
};

static DWORDAndNameW __KSPROPERTY_TOPOLOGY[]
{
	ID_AND_NAME_W(KSPROPERTY_TOPOLOGY_CATEGORIES),
	ID_AND_NAME_W(KSPROPERTY_TOPOLOGY_NODES),
	ID_AND_NAME_W(KSPROPERTY_TOPOLOGY_CONNECTIONS),
	ID_AND_NAME_W(KSPROPERTY_TOPOLOGY_NAME),
};

static DWORDAndNameW __KSPROPERTY_PIN[]
{
	ID_AND_NAME_W(KSPROPERTY_PIN_CINSTANCES),
	ID_AND_NAME_W(KSPROPERTY_PIN_CTYPES),
	ID_AND_NAME_W(KSPROPERTY_PIN_DATAFLOW),
	ID_AND_NAME_W(KSPROPERTY_PIN_DATARANGES),
	ID_AND_NAME_W(KSPROPERTY_PIN_DATAINTERSECTION),
	ID_AND_NAME_W(KSPROPERTY_PIN_INTERFACES),
	ID_AND_NAME_W(KSPROPERTY_PIN_MEDIUMS),
	ID_AND_NAME_W(KSPROPERTY_PIN_COMMUNICATION),
	ID_AND_NAME_W(KSPROPERTY_PIN_GLOBALCINSTANCES),
	ID_AND_NAME_W(KSPROPERTY_PIN_NECESSARYINSTANCES),
	ID_AND_NAME_W(KSPROPERTY_PIN_PHYSICALCONNECTION),
	ID_AND_NAME_W(KSPROPERTY_PIN_CATEGORY),
	ID_AND_NAME_W(KSPROPERTY_PIN_NAME),
	ID_AND_NAME_W(KSPROPERTY_PIN_CONSTRAINEDDATARANGES),
	ID_AND_NAME_W(KSPROPERTY_PIN_PROPOSEDATAFORMAT),
	ID_AND_NAME_W(KSPROPERTY_PIN_PROPOSEDATAFORMAT2),
	ID_AND_NAME_W(KSPROPERTY_PIN_MODEDATAFORMATS),
};

static DWORDAndNameW __KSPROPERTY_CONNECTION[]
{
	ID_AND_NAME_W(KSPROPERTY_CONNECTION_STATE),
	ID_AND_NAME_W(KSPROPERTY_CONNECTION_PRIORITY),
	ID_AND_NAME_W(KSPROPERTY_CONNECTION_DATAFORMAT),
	ID_AND_NAME_W(KSPROPERTY_CONNECTION_ALLOCATORFRAMING),
	ID_AND_NAME_W(KSPROPERTY_CONNECTION_PROPOSEDATAFORMAT),
	ID_AND_NAME_W(KSPROPERTY_CONNECTION_ACQUIREORDERING),
	ID_AND_NAME_W(KSPROPERTY_CONNECTION_ALLOCATORFRAMING_EX),
	ID_AND_NAME_W(KSPROPERTY_CONNECTION_STARTAT),
};

static DWORDAndNameW __MF_ATTRIBUTE_TYPE[]
{
	ID_AND_NAME_W(MF_ATTRIBUTE_UINT32),
	ID_AND_NAME_W(MF_ATTRIBUTE_UINT64),
	ID_AND_NAME_W(MF_ATTRIBUTE_DOUBLE),
	ID_AND_NAME_W(MF_ATTRIBUTE_GUID),
	ID_AND_NAME_W(MF_ATTRIBUTE_STRING),
	ID_AND_NAME_W(MF_ATTRIBUTE_BLOB),
	ID_AND_NAME_W(MF_ATTRIBUTE_IUNKNOWN),
};

static DWORDAndNameW __VARTYPE[] =
{
	ID_AND_NAME_W(VT_EMPTY),
	ID_AND_NAME_W(VT_NULL),
	ID_AND_NAME_W(VT_I2),
	ID_AND_NAME_W(VT_I4),
	ID_AND_NAME_W(VT_R4),
	ID_AND_NAME_W(VT_R8),
	ID_AND_NAME_W(VT_CY),
	ID_AND_NAME_W(VT_DATE),
	ID_AND_NAME_W(VT_BSTR),
	ID_AND_NAME_W(VT_DISPATCH),
	ID_AND_NAME_W(VT_ERROR),
	ID_AND_NAME_W(VT_BOOL),
	ID_AND_NAME_W(VT_VARIANT),
	ID_AND_NAME_W(VT_UNKNOWN),
	ID_AND_NAME_W(VT_DECIMAL),
	ID_AND_NAME_W(VT_I1),
	ID_AND_NAME_W(VT_UI1),
	ID_AND_NAME_W(VT_UI2),
	ID_AND_NAME_W(VT_UI4),
	ID_AND_NAME_W(VT_I8),
	ID_AND_NAME_W(VT_UI8),
	ID_AND_NAME_W(VT_INT),
	ID_AND_NAME_W(VT_UINT),
	ID_AND_NAME_W(VT_VOID),
	ID_AND_NAME_W(VT_HRESULT),
	ID_AND_NAME_W(VT_PTR),
	ID_AND_NAME_W(VT_SAFEARRAY),
	ID_AND_NAME_W(VT_CARRAY),
	ID_AND_NAME_W(VT_USERDEFINED),
	ID_AND_NAME_W(VT_LPSTR),
	ID_AND_NAME_W(VT_LPWSTR),
	ID_AND_NAME_W(VT_RECORD),
	ID_AND_NAME_W(VT_INT_PTR),
	ID_AND_NAME_W(VT_UINT_PTR),
	ID_AND_NAME_W(VT_FILETIME),
	ID_AND_NAME_W(VT_BLOB),
	ID_AND_NAME_W(VT_STREAM),
	ID_AND_NAME_W(VT_STORAGE),
	ID_AND_NAME_W(VT_STREAMED_OBJECT),
	ID_AND_NAME_W(VT_STORED_OBJECT),
	ID_AND_NAME_W(VT_BLOB_OBJECT),
	ID_AND_NAME_W(VT_CF),
	ID_AND_NAME_W(VT_CLSID),
	ID_AND_NAME_W(VT_VERSIONED_STREAM),
};

static const std::wstring ToString(DWORDAndNameW* def, UINT defLen, DWORD value, bool flags = FALSE);
static const std::string ToString(DWORDAndNameA* def, UINT defLen, DWORD value, bool flags = FALSE);
static const std::wstring ToString(DWORDAndNameW* def, UINT defLen, DWORD value, bool flags)
{
	if (!def)
		return L"???";

	std::wstring str;
	if (flags)
	{
		for (DWORD i = 0; i < defLen; i++)
		{
			if (def[i].dw == 0 || (value & def[i].dw) == def[i].dw)
			{
				if (!str.empty())
				{
					str.append(L" | ");
				}
				str.append(def[i].name);
			}
		}
	}
	else
	{
		for (DWORD i = 0; i < defLen; i++)
		{
			if (value == def[i].dw)
			{
				str.append(def[i].name);
				break;
			}
		}
	}

	if (str.empty())
	{
		str.append(std::to_wstring(value));
	}
	return str;
}

static const std::string ToString(DWORDAndNameA* def, UINT defLen, DWORD value, bool flags)
{
	if (!def)
		return "???";

	std::string str;
	if (flags)
	{
		for (DWORD i = 0; i < defLen; i++)
		{
			if (def[i].dw == 0 || (value & def[i].dw) == def[i].dw)
			{
				if (!str.empty())
				{
					str.append(" | ");
				}
				str.append(def[i].name);
			}
		}
	}
	else
	{
		for (DWORD i = 0; i < defLen; i++)
		{
			if (value == def[i].dw)
			{
				str.append(def[i].name);
				break;
			}
		}
	}

	if (str.empty())
	{
		str.append(std::to_string(value));
	}
	return str;
}

const std::wstring KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY_ToString(ULONG value) { return ToString(__KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY, sizeof(__KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY) / sizeof(DWORDAndNameA), value); }
const std::wstring PROPSETID_VIDCAP_CAMERACONTROL_ToString(ULONG value) { return ToString(__KSPROPERTY_VIDCAP_CAMERACONTROL, sizeof(__KSPROPERTY_VIDCAP_CAMERACONTROL) / sizeof(DWORDAndNameA), value); }
const std::wstring PROPSETID_VIDCAP_VIDEOPROCAMP_ToString(ULONG value) { return ToString(__KSPROPERTY_VIDCAP_VIDEOPROCAMP, sizeof(__KSPROPERTY_VIDCAP_VIDEOPROCAMP) / sizeof(DWORDAndNameA), value); }
const std::wstring KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_PROPERTY_ToString(ULONG value) { return ToString(__KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_PROPERTY, sizeof(__KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_PROPERTY) / sizeof(DWORDAndNameA), value); }
const std::wstring KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_ToString(ULONG value) { return ToString(__KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST, sizeof(__KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST) / sizeof(DWORDAndNameA), value); }
const std::wstring PROPSETID_VIDCAP_CAMERACONTROL_IMAGE_PIN_CAPABILITY_ToString(ULONG value) { return ToString(__KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY, sizeof(__KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY) / sizeof(DWORDAndNameA), value); }
const std::wstring KSPROPERTY_TOPOLOGY_ToString(ULONG value) { return ToString(__KSPROPERTY_TOPOLOGY, sizeof(__KSPROPERTY_TOPOLOGY) / sizeof(DWORDAndNameA), value); }
const std::wstring KSPROPERTY_PIN_ToString(ULONG value) { return ToString(__KSPROPERTY_PIN, sizeof(__KSPROPERTY_PIN) / sizeof(DWORDAndNameA), value); }
const std::wstring KSPROPSETID_Connection_ToString(ULONG value) { return ToString(__KSPROPERTY_CONNECTION, sizeof(__KSPROPERTY_CONNECTION) / sizeof(DWORDAndNameA), value); }

const std::wstring KSPROPERTY_TYPE_ToString(ULONG value) { return ToString(__KSPROPERTY_TYPE, sizeof(__KSPROPERTY_TYPE) / sizeof(DWORDAndNameA), value, true); }
const std::wstring MF_ATTRIBUTE_TYPE_ToString(MF_ATTRIBUTE_TYPE value) { return ToString(__MF_ATTRIBUTE_TYPE, sizeof(__MF_ATTRIBUTE_TYPE) / sizeof(DWORDAndNameA), value); }
const std::string WM_ToString(UINT msg) { return ToString(__WM, sizeof(__WM) / sizeof(DWORDAndNameA), msg); }
const std::wstring VARTYPE_ToString(VARTYPE value)
{
	auto type = value & VT_TYPEMASK;
	auto str = ToString(__VARTYPE, sizeof(__VARTYPE) / sizeof(DWORDAndNameW), value);
	if (value & VT_VECTOR)
	{
		str += L"VT_VECTOR";
	}

	if (value & VT_ARRAY)
	{
		str += L"VT_ARRAY";
	}

	if (value & VT_BYREF)
	{
		str += L"VT_BYREF";
	}
	return str;
}
